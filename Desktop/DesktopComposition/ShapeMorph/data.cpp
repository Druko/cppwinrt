//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "data.h"
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include "WindowsNumerics.h"
#include <Windows.Graphics.Interop.h>
#include <wrl.h>

using namespace Windows::Foundation;
using namespace Windows::Foundation::Numerics;
using namespace Windows::UI;
using namespace Windows::UI::Composition;
using namespace Windows::Graphics;
using namespace Microsoft::WRL;

namespace
{
class GeoSource final :
    public ABI::Windows::Graphics::IGeometrySource2D,
    public ABI::Windows::Graphics::IGeometrySource2DInterop
 {
    ULONG _cRef;
    ComPtr<ID2D1Geometry> _cpGeometry;

public:
    GeoSource(ID2D1Geometry* pGeometry)
        : _cRef(1)
        , _cpGeometry(pGeometry)
    { }

    IFACEMETHODIMP QueryInterface(REFIID iid, void ** ppvObject) override
    {
        if (iid == __uuidof(ABI::Windows::Graphics::IGeometrySource2DInterop))
        {
            AddRef();
            *ppvObject = static_cast<ABI::Windows::Graphics::IGeometrySource2DInterop*>(this);
            return S_OK;
        }
        return E_NOINTERFACE;
    }

    IFACEMETHODIMP_(ULONG) AddRef() override
    {
        return InterlockedIncrement(&_cRef);
    }

    IFACEMETHODIMP_(ULONG) Release() override
    {
        ULONG cRef = InterlockedDecrement(&_cRef);
        if (cRef == 0)
        {
            delete this;
        }
        return cRef;
    }

    IFACEMETHODIMP GetIids(ULONG*, IID**) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetRuntimeClassName(HSTRING*) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetTrustLevel(TrustLevel*) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        *value = _cpGeometry.Get();
        (*value)->AddRef();
        return S_OK;
    }

    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};

typedef ComPtr<GeoSource> CanvasGeometry;
static bool IsRuntimeCompatible()
{
    if (!Windows::Foundation::Metadata::ApiInformation::IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
    {
        return false;
    }
    return true;
}

ref class AnimatedVisual sealed : public Microsoft::UI::Xaml::Controls::IAnimatedVisual
{
    ComPtr<ID2D1Factory> _d2dFactory;
    const int64_t c_durationTicks = 50050000L;
    Compositor^ const _c;
    ExpressionAnimation^ const _reusableExpressionAnimation;
    ContainerVisual^ _root;

    // Path 1
    CompositionColorBrush^ ColorBrush_AlmostDarkSlateGray_FF535353()
    {
        return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x53, 0x53, 0x53));
    }

    // Path 1
    CompositionColorBrush^ ColorBrush_White()
    {
        return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
    }

    // Path 1
    //   Path 1.PathGeometry
    //     Path
    CubicBezierEasingFunction^ CubicBezierEasingFunction()
    {
        return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
    }

    CanvasGeometry Geometry_0()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -90, -146 }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 176, -148.554993F });
        sink->AddLine({ 174.445007F, 121.445F });
        sink->AddLine({ -91.5550003F, 120 });
        sink->AddLine({ -90, -146 });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        FFHR(sink->Close());
        GeoSource* rawResult = new GeoSource(path.Get());
        result = rawResult;
        rawResult->Release();
        return result;
    }

    CanvasGeometry Geometry_1()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -90, -146 }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -90, -146 }, { 176, -148.554993F }, { 176, -148.554993F } });
        sink->AddBezier({ { 176, -148.554993F }, { 174.445007F, 121.445F }, { 174.445007F, 121.445F } });
        sink->AddBezier({ { 174.445007F, 121.445F }, { -91.5550003F, 120 }, { -91.5550003F, 120 } });
        sink->AddBezier({ { -91.5550003F, 120 }, { -90, -146 }, { -90, -146 } });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        FFHR(sink->Close());
        GeoSource* rawResult = new GeoSource(path.Get());
        result = rawResult;
        rawResult->Release();
        return result;
    }

    CanvasGeometry Geometry_2()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 42.2229996F, -146 }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 115.248001F, -146 }, { 174.445007F, -86.1299973F }, { 174.445007F, -12.2770004F } });
        sink->AddBezier({ { 174.445007F, 61.5760002F }, { 115.248001F, 121.445F }, { 42.2229996F, 121.445F } });
        sink->AddBezier({ { -30.802F, 121.445F }, { -90, 61.5760002F }, { -90, -12.2770004F } });
        sink->AddBezier({ { -90, -86.1299973F }, { -30.802F, -146 }, { 42.2229996F, -146 } });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        FFHR(sink->Close());
        GeoSource* rawResult = new GeoSource(path.Get());
        result = rawResult;
        rawResult->Release();
        return result;
    }

    // Path 1
    //   Path 1.PathGeometry
    //     Path
    LinearEasingFunction^ LinearEasingFunction()
    {
        return _c->CreateLinearEasingFunction();
    }

    // Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
        result->StartAnimation("Path", PathKeyFrameAnimation());
        auto controller = result->TryGetAnimationController("Path");
        controller->Pause();
        _reusableExpressionAnimation->ClearAllParameters();
        _reusableExpressionAnimation->Expression = "_.Progress";
        _reusableExpressionAnimation->SetReferenceParameter("_", _root);
        controller->StartAnimation("Progress", _reusableExpressionAnimation);
        return result;
    }

    // Path 1
    //   Path 1.PathGeometry
    // Path
    PathKeyFrameAnimation^ PathKeyFrameAnimation()
    {
        auto result = _c->CreatePathKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())), LinearEasingFunction());
        result->InsertKeyFrame(0.239999995F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())), CubicBezierEasingFunction());
        return result;
    }

    // The root of the composition.
    ContainerVisual^ Root()
    {
        auto result = _root = _c->CreateContainerVisual();
        auto propertySet = result->Properties;
        propertySet->InsertScalar("Progress", 0);
        auto children = result->Children;
        children->InsertAtTop(ShapeVisual());
        return result;
    }

    ShapeVisual^ ShapeVisual()
    {
        auto result = _c->CreateShapeVisual();
        result->Size = { 960, 540 };
        auto shapes = result->Shapes;
        // Path 1
        shapes->Append(SpriteShape());
        return result;
    }

    // Path 1
    CompositionSpriteShape^ SpriteShape()
    {
        auto result = _c->CreateSpriteShape();
        result->TransformMatrix = {1, 0, 0, 1, 480, 270};
        result->FillBrush = ColorBrush_AlmostDarkSlateGray_FF535353();
        result->Geometry = PathGeometry();
        result->StrokeBrush = ColorBrush_White();
        result->StrokeMiterLimit = 4;
        result->StrokeThickness = 2;
        return result;
    }

    static IGeometrySource2D^ CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)
    {
        ComPtr<ABI::Windows::Graphics::IGeometrySource2D> interop = geo.Detach();
        return reinterpret_cast<IGeometrySource2D^>(interop.Get());
    }

    static void FFHR(HRESULT hr)
    {
        if (hr != S_OK)
        {
            RoFailFastWithErrorContext(hr);
        }
    }

public:
    AnimatedVisual(Compositor^ compositor)
        : _c(compositor)
        , _reusableExpressionAnimation(compositor->CreateExpressionAnimation())
    {
        FFHR(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf()));
        Root();
    }
    virtual ~AnimatedVisual() { }

    property Windows::Foundation::TimeSpan Duration
    {
        virtual Windows::Foundation::TimeSpan get() { return { c_durationTicks }; }
    }

    property Windows::UI::Composition::Visual^ RootVisual
    {
        virtual Windows::UI::Composition::Visual^ get() { return _root; }
    }

    property Windows::Foundation::Numerics::float2 Size
    {
        virtual Windows::Foundation::Numerics::float2 get() { return { 960, 540 }; }
    }

};
} // end namespace

Microsoft::UI::Xaml::Controls::IAnimatedVisual^ AnimatedVisuals::SquareCircleMorph::TryCreateAnimatedVisual(
    Compositor^ compositor,
    Object^* diagnostics)
{
    diagnostics = nullptr;
    if (!IsRuntimeCompatible())
    {
        return nullptr;
    }
    return ref new AnimatedVisual(compositor);
}
